{"split":"2-0","session.current":["/plot_utils.py","/sim_wtrace_exp.py"],"session.open":{"/plot_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":23,"column":4},"end":{"row":23,"column":10}},"lastUse":1540669804210,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"text":"import matplotlib"},{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":100,"column":0}},"lines":["matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","matplotlib.use('Agg')","import matplotlib.pyplot as plot","import itertools, scipy #, seaborn","import numpy as np","","NICE_BLUE = '#66b3ff'","NICE_RED = '#ff9999'","NICE_GREEN = '#99ff99'","NICE_ORANGE = '#ffcc99'","NICE_PURPLE = 'mediumpurple'","","nice_color = itertools.cycle((NICE_BLUE, NICE_RED, NICE_GREEN, NICE_ORANGE))","dark_color = itertools.cycle(('green', 'purple', 'blue', 'magenta', 'purple', 'gray', 'brown', 'turquoise', 'gold', 'olive', 'silver', 'rosybrown', 'plum', 'goldenrod', 'lightsteelblue', 'lightpink', 'orange', 'darkgray', 'orangered'))","light_color = itertools.cycle(('silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'turquoise'))","linestyle = itertools.cycle(('-', '--', '-.', ':') )","marker_cycle = itertools.cycle(('x', '+', 'v', '^', 'p', 'd', '<', '>', '1' , '2', '3', '4') )","skinny_marker_l = ['x', '+', '1', '2', '3', '4']","","mew, ms = 1, 2 # 3, 5","","def prettify(ax):","  ax.patch.set_alpha(0.2)","  ax.spines['right'].set_visible(False)","  ax.spines['top'].set_visible(False)","","def area_under_cdf(l, xl, xu):","  x_l = sorted(l)","  y_l = np.arange(len(x_l) )/len(x_l)","  ","  il = 0","  while x_l[il] < xl: il += 1","  iu = 0","  while x_l[iu] < xu: iu += 1","  return np.trapz(y=y_l[il:iu], x=x_l[il:iu] )","","def avg_within(x_l, xl, xu):","  return np.mean([x for x in x_l if x >= xl and x <= xu] )","","def CDFval_atx_l(l, atx_l):","  x_l = sorted(l)","  y_l = np.arange(len(x_l) )/len(x_l)","  ","  def val_atx(x):","    i = 0","    while x_l[i] < x: i += 1","    return y_l[i]","  ","  return {x: val_atx(x) for x in atx_l}","","def add_pdf(l, label, color, bins=50):","  # w_l = np.ones_like(l)/float(len(l) )","  # plot.hist(l, bins=bins, weights=w_l, label=label, color=color, edgecolor='black')","  ","  # n = len(l)//bins","  # p, x = np.histogram(l, bins=n) # bin it into n = N//10 bins","  # x = x[:-1] + (x[1] - x[0])/2   # convert bin edges to centers","  # f = scipy.interpolate.UnivariateSpline(x, p, s=n)","  # plot.plot(x, f(x), label=label, color=color, ls='--', lw=2, mew=2, ms=2)","  ","  # density = scipy.stats.gaussian_kde(l)","  # # xs = np.linspace(0, 8, 200)","  # density.covariance_factor = lambda : .25","  # density._compute_covariance()","  # plot.plot(l, density(l) )","  ","  seaborn.distplot(l, hist=False, norm_hist=True, kde=True, bins=bins, label=label, color=color,","    hist_kws={'edgecolor':'black'}, kde_kws={'linewidth': 3} )","","def add_cdf(l, ax, label, color, drawline_x_l=[] ):","  plot.sca(ax)","  x_l = sorted(l)","  y_l = np.arange(len(x_l) )/len(x_l)","  plot.plot(x_l, y_l, label=label, color=color, marker='.', linestyle=':', lw=2, mew=2, ms=2) # lw=1, mew=1, ms=1","  ","  def drawline(x):","    i = 0","    while i < len(x_l) and x_l[i] < x: i += 1","    if i == len(x_l):","      return","    ax.add_line(","      matplotlib.lines.Line2D([x_l[i], x_l[i]], [0, y_l[i]], color=color, linestyle='--') )","    ax.add_line(","      matplotlib.lines.Line2D([0, x_l[i]], [y_l[i], y_l[i]], color=color, linestyle='--') )","  ","  for x in drawline_x_l:","    drawline(x)","","def ylabel(resource, metric):","  if resource == 'cpu' and metric == 'usage':","    return 'CPU usage (Core)'","  elif resource == 'memory' and metric == 'current':","    return 'Memory usage (GB)'","  else:","    log(ERROR, \"Unrecognized args;\", resource=resource, metric=metric)","    return -1","","  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":90,"column":0},"end":{"row":98,"column":0}},"nl":"\n","lines":["def ylabel(resource, metric):","  if resource == 'cpu' and metric == 'usage':","    return 'CPU usage (Core)'","  elif resource == 'memory' and metric == 'current':","    return 'Memory usage (GB)'","  else:","    log(ERROR, \"Unrecognized args;\", resource=resource, metric=metric)","    return -1"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":90,"column":0},"end":{"row":91,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":90,"column":0},"end":{"row":91,"column":0}},"nl":"\n","lines":["  "]}]}]],"redo":[]},"/sim_wtrace_objs.py":{"scrollTop":5549.5,"scrollLeft":0,"selection":{"start":{"row":354,"column":41},"end":{"row":354,"column":41}},"lastUse":1540669633287,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":8},"end":{"row":6,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":9},"end":{"row":6,"column":10}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":10},"end":{"row":6,"column":11}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":11},"end":{"row":6,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":12},"end":{"row":6,"column":13}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":13},"end":{"row":6,"column":14}},"text":"s"}]}]],"redo":[]},"/sim_wtrace_exp.py":{"scrollTop":5312,"scrollLeft":0,"selection":{"start":{"row":345,"column":12},"end":{"row":345,"column":12}},"lastUse":1540665600011,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":207,"column":34},"end":{"row":207,"column":35}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":207,"column":35},"end":{"row":207,"column":36}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":208,"column":32},"end":{"row":208,"column":40}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":207,"column":36},"end":{"row":207,"column":44}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":207,"column":44},"end":{"row":207,"column":45}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":207,"column":45},"end":{"row":207,"column":53}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":207,"column":53},"end":{"row":207,"column":54}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":208,"column":0},"end":{"row":209,"column":0}},"nl":"\n","lines":["    print(\"sching_m= {}\".format() )"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":9},"end":{"row":238,"column":21}},"text":"w_prediction"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":21},"end":{"row":238,"column":22}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":22},"end":{"row":238,"column":34}},"text":"w_prediction"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":34},"end":{"row":238,"column":35}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":35},"end":{"row":239,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":239,"column":0},"end":{"row":239,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":239,"column":4},"end":{"row":239,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":9},"end":{"row":238,"column":17}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":17},"end":{"row":238,"column":18}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":18},"end":{"row":238,"column":26}},"text":"sching_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":26},"end":{"row":238,"column":27}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":27},"end":{"row":238,"column":28}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":9},"end":{"row":238,"column":16}},"text":"sinfo_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":16},"end":{"row":238,"column":17}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":17},"end":{"row":238,"column":24}},"text":"sinfo_m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":24},"end":{"row":238,"column":25}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":238,"column":25},"end":{"row":238,"column":26}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":238,"column":44},"end":{"row":238,"column":71}},"text":" w_prediction=w_prediction,"}]}]],"redo":[]},"/rvs.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":16,"column":18},"end":{"row":16,"column":18}},"lastUse":1540665518992,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"text":"import matplotlib"},{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":620,"column":0}},"lines":["matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","matplotlib.use('Agg')","import matplotlib.pyplot as plot","","import math, random, numpy, scipy","import numpy as np","from scipy.stats import *","","from plot_utils import *","from log import *","","class RV(): # Random Variable","  def __init__(self, l_l, u_l):","    self.l_l = l_l","    self.u_l = u_l","","class Normal(RV):","  def __init__(self, mu, sigma):","    RV.__init__(self, l_l=float('-Inf'), u_l=float('Inf') )","    self.mu = mu","    self.sigma = sigma","    ","    self.dist = scipy.stats.norm(mu, sigma)","  ","  def __repr__(self):","    return 'Normal[mu= {}, sigma= {}]'.format(self.mu, self.sigma)","  ","  def cdf(self, x):","    return self.dist.cdf(x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return self.mu","  ","  def sample(self):","    return self.dist.rvs(size=1)[0]","","class TNormal(RV):","  def __init__(self, mu, sigma, max_value=np.inf):","    RV.__init__(self, l_l=0, u_l=max_value)","    sigma = sigma if sigma != 0 else 0.01","    self.mu = mu","    self.sigma = sigma","    ","    lower, upper = 0, max_value","    a = (lower - mu)/sigma","    b = (upper - mu)/sigma","    self.dist = scipy.stats.truncnorm(a, b, loc=mu, scale=sigma)","    # mean, var, skew, kurt = scipy.stats.truncnorm.stats(a, b, moments='mvsk')","    # blog(mean=mean, var=var, skew=skew, kurt=kurt)","  ","  def __repr__(self):","    return 'TNormal[mu= {}, sigma= {}]'.format(self.mu, self.sigma)","  ","  def cdf(self, x):","    return self.dist.cdf(x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return self.dist.mean()","  ","  def std(self):","    return self.dist.std()","  ","  def sample(self):","    return self.dist.rvs(size=1)[0]","","class Exp(RV):","  def __init__(self, mu, D=0):","    RV.__init__(self, l_l=D, u_l=np.inf)","    self.D = D","    self.mu = mu","  ","  def __repr__(self):","    if self.D == 0:","      return r'Exp(\\mu={})'.format(self.mu)","    return r'{} + Exp(\\mu={})'.format(self.D, self.mu)","  ","  def tail(self, x):","    if x <= self.l_l:","      return 1","    return math.exp(-self.mu*(x - self.D) )","  ","  def cdf(self, x):","    if x <= self.l_l:","      return 0","    return 1 - math.exp(-self.mu*(x - self.D) )","  ","  def pdf(self, x):","    if x <= self.l_l:","      return 0","    return self.mu*math.exp(-self.mu*(x - self.D) )","  ","  def mean(self):","    return self.D + 1/self.mu","  ","  def var(self):","    return 1/self.mu**2","  ","  def moment(self, i):","    return moment_ith(i, self)","  ","  def laplace(self, s):","    if self.D > 0:","      log(ERROR, \"D= {} != 0\".format(D) )","    return self.mu/(s + self.mu)","  ","  def sample(self):","    return self.D + random.expovariate(self.mu)","","class HyperExp(RV):","  def __init__(self, p_l, mu_l):","    RV.__init__(self, l_l=0, u_l=np.inf)","    self.p_l = p_l","    self.mu_l = mu_l","    ","    self.X_l = [Exp(mu) for mu in mu_l]","    ","    self.i_l = [i for i in range(len(self.p_l) ) ]","    self.dist_for_gensample = scipy.stats.rv_discrete(name='hyperexp', values=(self.i_l, self.p_l) )","  ","  def __repr__(self):","    return r'HyperExp(p= {}, \\mu= {})'.format(self.p_l, self.mu_l)","  ","  def pdf(self, x):","    return sum([self.p_l[i]*X.pdf(x) for i, X in enumerate(self.X_l) ] )","  ","  def cdf(self, x):","    return sum([self.p_l[i]*X.cdf(x) for i, X in enumerate(self.X_l) ] )","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return sum([self.p_l[i]*X.mean() for i, X in enumerate(self.X_l) ] )","  ","  def moment(self, m):","    return sum([self.p_l[i]*X.moment(m) for i, X in enumerate(self.X_l) ] )","  ","  def laplace(self, s):","    return sum([self.p_l[i]*X.laplace(s) for i, X in enumerate(self.X_l) ] )","  ","  def sample(self):","    i = self.dist_for_gensample.rvs()","    return self.X_l[i].sample()","","class Pareto(RV):","  def __init__(self, loc, a):","    RV.__init__(self, l_l=loc, u_l=np.inf)","    self.loc = loc","    self.a = a","  ","  def __repr__(self):","    return \"Pareto(loc= {}, a= {})\".format(self.loc, self.a)","  ","  def tolatex(self):","    return r'Pareto(\\min= {}, \\alpha= {})'.format(self.loc, self.a)","  ","  def tail(self, x):","    if x <= self.l_l:","      return 1","    return (self.loc/x)**self.a","  ","  def cdf(self, x):","    if x <= self.l_l:","      return 0","    return 1 - (self.loc/x)**self.a","  ","  def pdf(self, x):","    if x <= self.l_l:","      return 0","    return self.a*self.loc**self.a / x**(self.a+1)","  ","  def dpdf_dx(self, x):","    if x <= self.l_l:","      return 0","    return sympy.mpmath.diff(lambda y: self.a*self.loc**self.a / y**(self.a+1), x)","  ","  def mean(self):","    if self.a <= 1:","      log(WARNING, \"Mean is Infinity; a= {} <= 1\".format(self.a) )","      return np.inf","    else:","      return self.loc*self.a/(self.a-1)","  ","  def var(self):","    if self.a <= 2:","      log(WARNING, \"Variance is Infinity; a= {} <= 2\".format(self.a) )","      return np.inf","    else:","      return self.a*self.loc**2 / (self.a-1)**2/(self.a-2)","  ","  def sample(self):","    return ((numpy.random.pareto(self.a, 1) + 1)*self.loc)[0]","    # return pareto.ppf(numpy.random.uniform(0, 1), b=self.a, scale=self.loc)","","class TPareto(): # Truncated","  def __init__(self, l, u, a):","    RV.__init__(self, l_l=l, u_l=u)","    self.l = l","    self.u = u","    self.a = a","  ","  def __repr__(self):","    return \"TPareto(l= {}, u= {}, a= {})\".format(self.l, self.u, self.a)","  ","  def tolatex(self):","    return r'TPareto(\\min= {}, \\max= {}, \\alpha= {})'.format(self.l, self.u, self.a)","  ","  def pdf(self, x):","    if x < self.l: return 0","    elif x >= self.u: return 0","    else:","      return self.a*self.l**self.a * 1/x**(self.a+1) / (1 - (self.l/self.u)**self.a)","  ","  def cdf(self, x):","    if x < self.l: return 0","    elif x >= self.u: return 1","    else:","      return (1 - (self.l/x)**self.a)/(1 - (self.l/self.u)**self.a)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return self.moment(1)","  ","  def std(self):","    return math.sqrt(self.moment(2) - self.mean()**2)","  ","  def moment(self, k):","    if k == self.a:","      return math.log(self.u_l/self.l)","    else:","      return self.a*self.l**k/(self.a-k) * \\","             (1 - (self.l/self.u)**(self.a-k))/(1 - (self.l/self.u)**self.a)","  ","  def sample(self):","    r = random.uniform(0, 1)","    s = self.l*(1 - r*(1-(self.l/self.u)**self.a) )**(-1/self.a)","    if s < self.l or s > self.u:","      log(ERROR, \"illegal sample! s= {}\".format(s) )","      return None","    return s","","class SimRV(RV):","  def __init__(self, sample_l):","    RV.__init__(self, l_l=min(sample_l), u_l=max(sample_l) )","    ","    self.sample_l = sample_l","    self.num_sample = len(self.sample_l)","  ","  def __repr__(self):","    return \"SimRV\"","  ","  def mean(self):","    return sum(self.sample_l)/self.num_sample","  ","  def sample(self):","    return self.sample_l[math.floor(self.num_sample*random.random() ) ]","","class Dolly(RV):","  # Kristen et al. A Better Model for Job Redundancy: Decoupling Server Slowdown and Job Size","  def __init__(self):","    RV.__init__(self, l_l=1, u_l=12)","    ","    self.v = numpy.arange(1, 13)","    self.p = [0.23, 0.14, 0.09, 0.03, 0.08, 0.1, 0.04, 0.14, 0.12, 0.021, 0.007, 0.002]","    self.dist = scipy.stats.rv_discrete(name='dolly', values=(self.v, self.p) )","  ","  def __repr__(self):","    return \"Dolly[{}, {}]\".format(self.l_l, self.u_l)","  ","  def tolatex(self):","    return \"Dolly\"","  ","  def pdf(self, x):","    return self.dist.pmf(x) if (x >= self.l_l and x <= self.u_l) else 0","  ","  def cdf(self, x):","    if x < self.l_l:","      return 0","    elif x > self.u_l:","      return 1","    return float(self.dist.cdf(math.floor(x) ) )","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return self.moment(1)","  ","  def moment(self, m):","    return sum([self.v[i]**m*self.p[i] for i in range(12) ] )","  ","  def sample(self):","    return random.randint(self.l_l, self.u_l)","  ","  def sample(self):","    u = random.uniform(0, 1)","    return self.dist.rvs()[0] + u/100","","class Bern(RV):","  def __init__(self, L, U, p):","    RV.__init__(self, l_l=L, u_l=U)","    self.p = p","    ","    self.v_l = [L, U]","    self.p_l = [1 - p, p]","    self.dist = scipy.stats.rv_discrete(name='bern', values=(self.v_l, self.p_l) )","  ","  def __repr__(self):","    return \"Bern(l= {}, u= {}, p= {})\".format(self.l_l, self.u_l, self.p)","  ","  def pdf(self, x):","    return self.dist.pmf(x)","  ","  def cdf(self, x):","    if x < self.l_l:","      return 0","    elif x > self.u_l:","      return 1","    return self.dist.cdf(math.floor(x) )","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return self.dist.mean()","  ","  def moment(self, i):","    return self.dist.moment(i)","  ","  def sample(self):","    return self.dist.rvs()[0]","","class DUniform():","  def __init__(self, lb, ub):","    RV.__init__(self, l_l=lb, u_l=ub)","    ","    self.v = numpy.arange(self.l_l, self.u_l+1)","    w_l = [1 for v in self.v]","    self.p = [w/sum(w_l) for w in w_l]","    self.dist = scipy.stats.rv_discrete(name='duniform', values=(self.v, self.p) )","  ","  def __repr__(self):","    return \"DUniform[{}, {}]\".format(self.l_l, self.u_l)","  ","  def mean(self):","    return (self.u_l + self.l_l)/2","  ","  def pdf(self, x):","    return self.dist.pmf(x)","  ","  def cdf(self, x):","    if x < self.l_l:","      return 0","    elif x > self.u_l:","      return 1","    return self.dist.cdf(math.floor(x) )","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def moment(self, i):","    # p = 1/(self.u_l - self.l_l + 1)","    # return sum([p*v**i for v in range(self.l_l, self.u_l+1) ] )","    return self.dist.moment(i)","  ","  def sample(self):","    # return random.randint(self.l_l, self.u_l)","    return self.dist.rvs()[0]","","class BZipf():","  def __init__(self, lb, ub, a=1):","    RV.__init__(self, l_l=lb, u_l=ub)","    self.a = a","    ","    self.v = numpy.arange(self.l_l, self.u_l+1) # values","    w_l = [float(v)**(-a) for v in self.v] # self.v**(-a) # weights","    self.p = [w/sum(w_l) for w in w_l]","    self.dist = scipy.stats.rv_discrete(name='bounded_zipf', values=(self.v, self.p) )","  ","  def __repr__(self):","    return \"BZipf([{}, {}], a= {})\".format(self.l_l, self.u_l, self.a)","  ","  def pdf(self, x):","    return self.dist.pmf(x)","  ","  def cdf(self, x):","    # if x < self.l_l: return 0","    # elif x >= self.u_l: return 1","    # else:","    #   return sum(self.p[:(x-self.l_l+1) ] )","    return self.dist.cdf(x)","  ","  def inv_cdf(self, p):","    return self.dist.ppf(p)","  ","  def tail(self, x):","    return 1 - self.cfd(x)","  ","  def mean(self):","    # return sum([v*self.p(i) for i,v in enumerate(self.v) ] )","    return self.dist.mean()","  ","  def sample(self):","    return self.dist.rvs(size=1)[0]","","class Binom():","  def __init__(self, n, p):","    RV.__init__(self, l_l=0, u_l=n)","    self.n = n","    self.p = p","    ","    self.dist = scipy.stats.nbinom(n, p)","  ","  def __repr__(self):","    return \"Binom[n= {}, p= {}]\".format(self.n, self.p)","  ","  def pdf(self, x):","    return self.dist.pdf(x)","  ","  def cdf(self, x):","    return self.dist.cdf(x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return self.dist.rvs(size=1)[0]","","class NegBinom():","  def __init__(self, num_succ, p):","    RV.__init__(self, l_l=num_succ, u_l=float('Inf') )","    self.p = p","    ","    self.dist = scipy.stats.nbinom(num_succ, p)","  ","  def __repr__(self):","    return \"NegBinom[num_succ= {}, p= {}]\".format(self.l_l, self.p)","  ","  def cdf(self, x):","    return self.dist.cdf(x - self.l_l)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return self.dist.rvs(size=1)[0]","","class Gamma():","  def __init__(self, num_exp, rate):","    RV.__init__(self, l_l=0, u_l=float('Inf') )","    ","    self.shape, self.scale = num_exp, 1/rate","    # self.dist = numpy.random.gamma(shape, scale, size=1)","    self.dist = scipy.stats.gamma(self.shape, self.scale)","  ","  def __repr__(self):","    return \"Gamma[shape= {}, scale= {}]\".format(self.shape, self.scale)","  ","  def cdf(self, x):","    return self.dist.cdf(x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return self.dist.rvs(size=1)[0]","","class X_n_k():","  def __init__(self, X, n, k):","    RV.__init__(self, l_l=X.l_l, u_l=X.u_l)","    self.X, self.n, self.k = X, n, k","  ","  def __repr__(self):","    return \"{}_{{}:{}}\".format(X, self.n, self.k)","  ","  def pdf(self, x):","    return self.n*self.X.pdf(x) * binomial(self.n-1, self.k-1) * self.X.cdf(x)**(self.k-1) * self.X.tail(x)**(self.n-self.k)","  ","  def cdf(self, x):","    return cdf_n_k(self.X, self.n, self.k, x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def moment(self, i):","    return float(mpmath.quad(lambda x: i*x**(i-1) * self.tail(x), [0, mpmath.inf] ) )","  ","  def sample(self):","    return gen_orderstat_sample(self.X, self.n, self.k)","","def binomial(n, k):","  return scipy.special.binom(n, k)","","def moment_ith(i, X):","  # return float(mpmath.quad(lambda x: i*x**(i-1) * X.tail(x), [0, X.u_l] ) ) # mpmath.inf 10000*10","  return float(mpmath.quad(lambda x: i*x**(i-1) * X.tail(x), [0, mpmath.inf] ) )","","# Order stats","def cdf_n_k(X, n, k, x): # Pr{X_n:k < x}","  cdf = 0","  for i in range(k, n+1):","    cdf += binomial(n, i) * X.cdf(x)**i * X.tail(x)**(n-i)","  return cdf","","def moment_ith_n_k(X, i, n, k): # E[X_n:k]","  return mpmath.quad(lambda x: i*x**(i-1) * (1 - cdf_n_k(X, n, k, x) ), [0, 10000*10] )","","def gen_orderstat_sample(X, n, k):","  # print(\"s_l= {}\".format(s_l) )","  return sorted([X.sample() for _ in range(n) ] )[k-1]","","def H(n):","  if n == 0:","    return 0","  sum_ = 0","  for i in range(1, n+1):","    sum_ += float(1/i)","  return sum_","","def fact(n):","  return math.factorial(n)","","def laplace(X, r):","  return mpmath.quad(lambda x: math.exp(-r*x) * X.pdf(x), [0, X.u_l] )","","def distm_to_rv(dist_m):","  name = dist_m['name']","  if name == 'TPareto':","    return TPareto(dist_m['l'], dist_m['u'], dist_m['a'] )","  elif name == 'BZipf':","    return BZipf(dist_m['l'], dist_m['u'] )","  else:","    log(ERROR, \"Unrecognized name= {}\".format(name) )","","def gen_rectangular_TNormal(mu, sigma, maxval, duration_mean):","  sigma = sigma if sigma != 0 else 0.01","  high_level = (maxval - mu)*np.random.rand() + mu","  medium_level = mu","  low_level = 2*mu - high_level","  rv_l = [TNormal(low_level, sigma, mu),","          TNormal(medium_level, sigma, high_level),","          TNormal(high_level, sigma, maxval) ]","  return RectangleRV(Exp(1/duration_mean), rv_l)","","class RectangleRV():","  def __init__(self, duration_rv, rv_l):","    self.duration_rv = duration_rv","    self.rv_l = rv_l","    ","    self.rv = self.rv_l[0]","    self.countdown_forchange = duration_rv.sample()","  ","  def __repr__(self):","    return 'BurstyRV:\\n' + \\","      '  duration_rv= {}\\n'.format(self.duration_rv) + \\","      '  rv_l= {}\\n'.format(self.rv_l)","  ","  def mean(self):","    return np.mean([rv.mean() for rv in self.rv_l] )","  ","  def sample(self):","    if self.countdown_forchange > 0:","      self.countdown_forchange -= 1","    else:","      self.countdown_forchange = self.duration_rv.sample()","      self.rv = np.random.choice(self.rv_l)","    return self.rv.sample()","  ","class MixedRVs():","  def __init__(self, p_l, rv_l):","    self.p_l = p_l","    self.rv_l = rv_l","    self.dist_to_select_rv = scipy.stats.rv_discrete(","      name='mixed', values=(numpy.arange(0, len(p_l) ), p_l) )","  ","  def __repr__(self):","    return 'MixOfRVs:\\n' + \\","      '  p_l= {}\\n'.format(self.p_l) + \\","      '  rv_l= {}\\n'.format(self.rv_l)","  ","  def mean(self):","    return sum([self.p_l[i]*rv.mean() for i, rv in enumerate(self.rv_l) ] )","  ","  def sample(self):","    return self.rv_l[self.dist_to_select_rv.rvs() ].sample()","","if __name__ == \"__main__\":","  # rv = TNormal(mu=1, sigma=2, max_value=10)","  # blog(rv=rv, rv_mean=rv.mean() )","  ","  # '''","  rv = gen_rectangular_TNormal(mu=10, sigma=1, maxval=20, duration_mean=100)","  blog(mean=rv.mean() )","  v_l = [rv.sample() for _ in range(2000) ]","  t_l = np.arange(1, len(v_l)+1)","  plot.plot(t_l, v_l, color=NICE_ORANGE, marker='.', ls=':', lw=2, mew=3, ms=3)","  prettify(plot.gca() )","  # plot.title('{}'.format(rv) )","  # plot.legend()","  plot.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)","  plot.tick_params(axis='y', which='both', left=False, top=False, labelleft=False)","  # plot.ylabel('Resource usage', fontsize=14)","  # plot.xlabel('Time', fontsize=14)","  ","  fig = plot.gcf()","  fig.set_size_inches(4, 1)","  plot.savefig('plot_rectangular_TNormal.png', bbox_inches='tight')","  fig.clear()","  # '''","  "]},{"action":"insertText","range":{"start":{"row":620,"column":0},"end":{"row":620,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":620,"column":0},"end":{"row":620,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":619,"column":2},"end":{"row":620,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":619,"column":0},"end":{"row":619,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":8},"end":{"row":11,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":9},"end":{"row":11,"column":10}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":10},"end":{"row":11,"column":11}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":11},"end":{"row":11,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":12},"end":{"row":11,"column":13}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"s"}]}]],"redo":[]},"/utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":0,"column":28},"end":{"row":0,"column":28}},"lastUse":1540665455817,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":72}},"text":"import os, json, re, errno, requests, time, collections, datetime, scipy"},{"action":"insertText","range":{"start":{"row":0,"column":72},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":397,"column":0}},"lines":["import numpy as np","import pandas as pd","","from log import *","","def requestget_repeatiffail(headers, down_url):","  for i in range(10):","    # with THREAD_GETLOCK:","    r = requests.get(down_url, headers=headers)","    if r.status_code != 200:","      log(ERROR, \"in requests.get;\", trial=i, down_url=down_url, status_code=r.status_code)","      time.sleep(1)","    else:","      return r","  return requests.get(down_url, headers=headers)","","def requestput_repeatiffail(headers, up_url, data):","  for i in range(10):","    # with THREAD_PUTLOCK:","    r = requests.put(up_url, headers=headers, data=data)","    if r.status_code != 200:","      log(ERROR, \"in requests.put;\", trial=i, up_url=up_url, status_code=r.status_code)","      time.sleep(1)","    else:","      return r","  return requests.put(up_url, headers=headers, data=data)","","def cleanmetrics_dumptostring(metric_l):","  s = ''","  for metricobj in metric_l:","    target = metricobj['target']","    for datapoint in metricobj['datapoints']:","      if datapoint[0]:","        s += '{'+'\"key\":\"{}\",\"timestamp\":{},\"value\":{}'.format(target, datapoint[1], datapoint[0] )+'}\\n'","  return s","","def gen_allfnames_indir(dirurl, extension='.json', prefix=None):","  rx = re.compile(r'\\{}'.format(extension) )","  l = []","  for path, dnames, fnames in os.walk(dirurl):","    for f in fnames:","      if rx.search(f):","        if prefix is None:","          yield f","        elif f.startswith(prefix):","          yield f","          ","","def gen_allfurls_indir(dirurl, extension='.json', prefix=None):","  rx = re.compile(r'\\{}'.format(extension) )","  l = []","  for path, dnames, fnames in os.walk(dirurl):","    for f in fnames:","      if rx.search(f):","        if prefix is None:","          yield os.path.join(path, f)","        elif f.startswith(prefix):","          yield os.path.join(path, f)","","def read_fromfurl(furl):","  try:","    with open(furl, \"r\") as fp:","      return fp.read()","  except:","    log(ERROR, 'in fp.read;', furl=furl, error_info=sys.exc_info()[0] )","    return -1","","def write_tofurl(data, furl):","  if not os.path.exists(os.path.dirname(furl) ):","    try:","      os.makedirs(os.path.dirname(furl) )","    except OSError as exc: # Guard against race condition","      if exc.errno != errno.EEXIST:","        log(ERROR, \"exception;\", errno=exc.errno)","        raise","  try:","    with open(furl, \"w\") as fp:","      fp.write(data)","  except:","    log(ERROR, 'in fp.write;', furl=furl, error_info=sys.exc_info()[0] )","    return 1","","def writejson_tofurl(data, furl):","  if not os.path.exists(os.path.dirname(furl) ):","    try:","      os.makedirs(os.path.dirname(furl) )","    except OSError as exc: # Guard against race condition","      if exc.errno != errno.EEXIST:","        raise","  ","  with open(furl, \"w\") as fp:","    json.dump(data, fp, indent=2, sort_keys=True)","","def read_strip_jsonf(furl):","  try:","    with open(furl) as f:","      return f.read().replace('\\n','').replace(\" \", \"\")","  except:","    log(ERROR, \"file does not exist!;\", furl=furl)","    return -1","","def cleanwritemetrics_fromdir_todir(fromdir, todir):","  for furl in gen_allfurls_indir(fromdir):","    with open(furl) as f:","      metric_l = json.load(f)","    ","    s = cleanmetrics_dumptostring(metric_l)","    if s == '':","      log(WARNING, \"was all NULL, skiping;\", furl=furl)","      continue","    ","    tofurl = todir + furl.replace(fromdir, '')","    write_tofurl(s, tofurl)","    log(INFO, \"cleaned and wrote; \", tofurl=tofurl)","","def agg_x_y_ms(ts_val_m1, ts_val_m2, aggfunc):","  ts_val_l_m = {}","  for ts, val in ts_val_m1.items():","    ts_val_l_m[ts] = [val]","  for ts, val in ts_val_m2.items():","    if ts in ts_val_l_m:","      ts_val_l_m[ts].append(val)","    else:","      ts_val_l_m[ts] = [val]","  ","  return {ts: aggfunc(val_l) for ts, val_l in ts_val_l_m.items() }","","def get_stat_perxslice_l(x_l, y_l, slicesize):","  # x_l is sorted","  x_l_ = []","  avg_l, std_l = [], []","  ","  ex = x_l[0] + slicesize","  b, e = 0, 0","  while b < len(x_l):","    while e < len(x_l) and x_l[e] <= ex:","      e += 1","      ","    l = y_l[b:e]","    avg_l.append(np.mean(l) )","    std_l.append(np.std(l) )","    ","    ex += slicesize","    x_l_.append(ex)","    b = e","  return x_l_, avg_l, std_l","","def is_timewindowlen_gt_twl(t_v_m, twl):","  # t_v_m = collections.OrderedDict(sorted(t_v_m.items() ) )","  t_l = [datetime.datetime.fromtimestamp(t) for t, v in t_v_m.items() ]","  if len(t_l) == 0:","    return False","  return max(t_l) - min(t_l) > twl","","def obj_data_m_has_enough(obj_data_m, timewindow_len):","  boolean_l = []","  for obj, data_m in obj_data_m.items():","    # log(INFO, \"obj= {}\".format(obj),","    #           cpu_key_l=[k for k, _ in data_m['cpu'].items() ],","    #           memory_key_l=[k for k, _ in data_m['memory'].items() ] )","    boolean_l.append(","      is_timewindowlen_gt_twl(data_m['cpu']['usage'], timewindow_len) )","    boolean_l.append(","      is_timewindowlen_gt_twl(data_m['memory']['current'], timewindow_len) )","  if not all(boolean_l):","    log(WARNING, \"not enough data is available;\", obj=obj)","    return False","  # if is_nan(data_m['cpu']['requested'] ) or is_nan(data_m['cpu']['limited'] ) or \\","  #   is_nan(data_m['memory']['requested'] ) or is_nan(data_m['memory']['limited'] ):","  #   log(WARNING, \"requested or limited is not available;\", obj=obj)","  #   return False","  # try:","  #   if is_nan(data_m['cpu']['requested'] ) or is_nan(data_m['memory']['requested'] ):","  #     log(WARNING, \"requested is not available;\", obj=obj)","  #     return False","  # except KeyError:","  #   pass","  return True","","def get_sorteddatetime_val_l(m, begin_attimezero=False):","  t_v_m = collections.OrderedDict(sorted(m.items() ) )","  t_l, v_l = [], []","  for t, v in t_v_m.items():","    t_l.append(datetime.datetime.fromtimestamp(int(t) ) )","    v_l.append(v)","  ","  if begin_attimezero:","    min_t = min(t_l)","    t_l = [(t - min_t).total_seconds() for t in t_l]","  return t_l, v_l","","def get_ticks_time_l(stime, etime, stepsize, steplabel):","  time_to_label = lambda t: '{}{}'.format('{0:.1f}'.format((t - stime)/stepsize), steplabel)","  ","  x_l, label_l = [], []","  step = stepsize*5","  ctime = stime","  while ctime <= etime:","    x_l.append(ctime)","    label_l.append(time_to_label(ctime) )","    ctime += step","  x_l.append(etime)","  label_l.append(time_to_label(etime) )","  # log(INFO, \"\", stime=stime, etime=etime, x_l=x_l, label_l=label_l)","  return x_l, label_l","","def get_ticks_resource_l(minsize, maxsize, stepsize, steplabel):","  size_to_label = lambda s: '{0:.2f}'.format(s/stepsize) + steplabel","  ","  x_l, label_l = [], []","  csize = minsize","  while csize <= maxsize:","    x_l.append(csize)","    label_l.append(size_to_label(csize) )","    csize += stepsize","  x_l.append(maxsize)","  label_l.append(size_to_label(maxsize) )","  return x_l, label_l","","def is_nan(e):","  try:","    if np.isnan(e):","      return True","  except:","    return False","","def is_any_nan(l):","  for e in l:","    if is_nan(e):","      return True","  return False","","def is_any_if(l, f_l):","  for e in l:","    for f in f_l:","      if f(e):","        return True","  return False","","def append_if(l, e, f_l):","  for f in f_l:","    if not f(e):","      return","  l.append(e)","","def deep_max(l):","  l_ = []","  for e in l:","    if isinstance(e, list):","      l_.extend(e)","    else:","      l_.append(e)","  return max(l_)","","def shorten_podname(pod):","  return pod[:40]+'...' if len(pod) > 40 else pod","","def interpolate(t_l, t_v_m):","  v_l = []","  for t in t_l:","    try:","      v_l.append(t_v_m[t] )","    except KeyError:","      v_l.append(np.nan)","  return pd.Series(v_l, index=t_l).interpolate(method='linear').tolist() # .fillna(0).tolist()","","def normed_correlation(x_l, y_l):","  if len(x_l) == 0 or len(y_l) == 0:","    return np.nan","  x_sqrsum = math.sqrt(sum([x**2 for x in x_l] ) )","  y_sqrsum = math.sqrt(sum([y**2 for y in y_l] ) )","  if x_sqrsum == 0 or y_sqrsum == 0:","    return 0","  return max(np.correlate(x_l, y_l, 'full') )/x_sqrsum/y_sqrsum","","def get_podtype(podname):","  '''","  Check if there is digits in s","  :param s: Input string","  :return: True if s has digits","  '''","  num_there = lambda s: any(i.isdigit() for i in s)","  ","  '''","  Get the pod name by their common prefixes","  :param podname: Pod name","  :return: The common prefix of pods","  '''","  # l = ['tr', 'learner', 'lhelper', 's3fs-copy-driver-pog', 'armada-sre-onboard', 'ibm-keepalived', \\","  #     'ibmcloud-object-storage', 'emotion-analysis-tone', 'ibm-kube-fluentd', 'kube-system.calico-node']","  l = ['ibm-system.armada-sre-onboard',","       'kube-system.ibmcloud-object-storage-driver',","       'kube-system.ibm-kube-fluentd',","       'kube-system.ibm-keepalived-watcher',","       'kube-system.calico-node']","  # l = []","  for e in l:","    if e in podname:","      return e","  ","  if \"-\" not in podname:","    podprefix = \"\".join([\"#\" if char.isdigit() else char for char in podname])","    return podprefix","  ","  podname_parts = podname.split(\"-\")","  podprefix = podname_parts[0]","  ","  # Replace the possible digits in the first part to \"x\"","  podprefix = \"\".join([\"#\" if char.isdigit() else char for char in podprefix])","  ","  for p_part in podname_parts[1:]:","    if re.match('v[0-9]', p_part):","      podprefix += \"-\" + p_part","    elif num_there(p_part):","      return podprefix","    elif re.match('[a-z]+', p_part):","      podprefix += \"-\" + p_part","    else:","      return podprefix","  ","  return podprefix","","def do_distributions_differ(v1_l, v2_l):","  # Compare with t-test","  # teststatistic, pvalue = scipy.stats.ttest_ind(v1_l, v2_l, equal_var=False)","  # Compare with Kolmogorov-Smirnov test","  teststatistic, pvalue = scipy.stats.ks_2samp(v1_l, v2_l)","  # print(\"teststatistic= {}, pvalue= {}\".format(teststatistic, pvalue) )","  # print(\"np.mean(v1_l)= {}, max(v1_l)= {}\".format(np.mean(v1_l), max(v1_l) ) )","  # print(\"np.mean(v2_l)= {}, max(v2_l)= {}\".format(np.mean(v2_l), max(v2_l) ) )","  if pvalue < 0.05: # distributions differ","    return True","  else:","    return False","","def map_to_key__val_l(m):","  k_l, v_l = [], []","  for k, v in m.items():","    k_l.append(k)","    v_l.append(v)","  return k_l, v_l","","def get_interpolated_vtimeseries(t1_v1_m, t2_v2_m, shift=0):","  t1_v1_m = {datetime.datetime.fromtimestamp(t)+shift: v for t, v in t1_v1_m.items() }","  t2_v2_m = {datetime.datetime.fromtimestamp(t): v for t, v in t2_v2_m.items() }","  ","  t_l = [t for t, _ in t1_v1_m.items() ]","  t_l.extend([t for t, _ in t2_v2_m.items() ] )","  if len(t_l) == 0:","    return [], []","  t_l = sorted(list(set(t_l) ) )","  # def get_for(t_v_m): # interpolation","  #   v_l = []","  #   for i, t in enumerate(t_l):","  #     try:","  #       v_l.append(t_v_m[t] )","  #     except KeyError:","  #       # v_l.append(np.nan)","  #       _j = i","  #       while _j >= 0 and (t_l[_j] not in t_v_m): _j -= 1","  #       j_ = i","  #       while j_ < len(t_l) and (t_l[j_] not in t_v_m): j_ += 1","        ","  #       if _j < 0:","  #         for k in range(i, -1, -1):","  #           t_v_m[t_l[k] ] = 0","  #       if j_ >= len(t_l):","  #         for k in range(i, len(t_l) ):","  #           t_v_m[t_l[k] ] = 0","        ","  #       if _j >= 0 and j_ < len(t_l):","  #         v_l.append((t_v_m[t_l[_j] ] + t_v_m[t_l[j_] ] )/2)","  #       else:","  #         v_l.append(0)","  #   return v_l","  # return get_for(t1_v1_m), get_for(t2_v2_m)","  def interpolate(t_v_m):","    v_l = []","    for t in t_l:","      try:","        v_l.append(t_v_m[t] )","      except KeyError:","        v_l.append(np.nan)","    return pd.Series(v_l, index=t_l).interpolate(method='linear').fillna(0).tolist()","    # return pd.Series(v_l).interpolate(method='linear') # .fillna(0)","    # vs = pd.Series(v_l)","    # print(\"vs= {}\".format(vs.describe() ) )","    # vs = vs.interpolate(method='linear')","    # print(\"after interpolation; vs= {}\".format(vs.describe() ) )","    # return vs","  return interpolate(t1_v1_m), interpolate(t2_v2_m)","","","if __name__ == '__main__':","  # cleanwritemetrics_fromdir_todir('/metrics/watson-prdwat-dal10-cruiser5', '/metrics/prdwat-dal10-cruiser5')","  log(INFO, \"done.\")"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":343,"column":0},"end":{"row":393,"column":0}},"nl":"\n","lines":["def get_interpolated_vtimeseries(t1_v1_m, t2_v2_m, shift=0):","  t1_v1_m = {datetime.datetime.fromtimestamp(t)+shift: v for t, v in t1_v1_m.items() }","  t2_v2_m = {datetime.datetime.fromtimestamp(t): v for t, v in t2_v2_m.items() }","  ","  t_l = [t for t, _ in t1_v1_m.items() ]","  t_l.extend([t for t, _ in t2_v2_m.items() ] )","  if len(t_l) == 0:","    return [], []","  t_l = sorted(list(set(t_l) ) )","  # def get_for(t_v_m): # interpolation","  #   v_l = []","  #   for i, t in enumerate(t_l):","  #     try:","  #       v_l.append(t_v_m[t] )","  #     except KeyError:","  #       # v_l.append(np.nan)","  #       _j = i","  #       while _j >= 0 and (t_l[_j] not in t_v_m): _j -= 1","  #       j_ = i","  #       while j_ < len(t_l) and (t_l[j_] not in t_v_m): j_ += 1","        ","  #       if _j < 0:","  #         for k in range(i, -1, -1):","  #           t_v_m[t_l[k] ] = 0","  #       if j_ >= len(t_l):","  #         for k in range(i, len(t_l) ):","  #           t_v_m[t_l[k] ] = 0","        ","  #       if _j >= 0 and j_ < len(t_l):","  #         v_l.append((t_v_m[t_l[_j] ] + t_v_m[t_l[j_] ] )/2)","  #       else:","  #         v_l.append(0)","  #   return v_l","  # return get_for(t1_v1_m), get_for(t2_v2_m)","  def interpolate(t_v_m):","    v_l = []","    for t in t_l:","      try:","        v_l.append(t_v_m[t] )","      except KeyError:","        v_l.append(np.nan)","    return pd.Series(v_l, index=t_l).interpolate(method='linear').fillna(0).tolist()","    # return pd.Series(v_l).interpolate(method='linear') # .fillna(0)","    # vs = pd.Series(v_l)","    # print(\"vs= {}\".format(vs.describe() ) )","    # vs = vs.interpolate(method='linear')","    # print(\"after interpolation; vs= {}\".format(vs.describe() ) )","    # return vs","  return interpolate(t1_v1_m), interpolate(t2_v2_m)",""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":343,"column":0},"end":{"row":344,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":6,"column":0},"end":{"row":36,"column":0}},"nl":"\n","lines":["def requestget_repeatiffail(headers, down_url):","  for i in range(10):","    # with THREAD_GETLOCK:","    r = requests.get(down_url, headers=headers)","    if r.status_code != 200:","      log(ERROR, \"in requests.get;\", trial=i, down_url=down_url, status_code=r.status_code)","      time.sleep(1)","    else:","      return r","  return requests.get(down_url, headers=headers)","","def requestput_repeatiffail(headers, up_url, data):","  for i in range(10):","    # with THREAD_PUTLOCK:","    r = requests.put(up_url, headers=headers, data=data)","    if r.status_code != 200:","      log(ERROR, \"in requests.put;\", trial=i, up_url=up_url, status_code=r.status_code)","      time.sleep(1)","    else:","      return r","  return requests.put(up_url, headers=headers, data=data)","","def cleanmetrics_dumptostring(metric_l):","  s = ''","  for metricobj in metric_l:","    target = metricobj['target']","    for datapoint in metricobj['datapoints']:","      if datapoint[0]:","        s += '{'+'\"key\":\"{}\",\"timestamp\":{},\"value\":{}'.format(target, datapoint[1], datapoint[0] )+'}\\n'","  return s"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":71,"column":0},"end":{"row":96,"column":0}},"nl":"\n","lines":["def cleanwritemetrics_fromdir_todir(fromdir, todir):","  for furl in gen_allfurls_indir(fromdir):","    with open(furl) as f:","      metric_l = json.load(f)","    ","    s = cleanmetrics_dumptostring(metric_l)","    if s == '':","      log(WARNING, \"was all NULL, skiping;\", furl=furl)","      continue","    ","    tofurl = todir + furl.replace(fromdir, '')","    write_tofurl(s, tofurl)","    log(INFO, \"cleaned and wrote; \", tofurl=tofurl)","","def agg_x_y_ms(ts_val_m1, ts_val_m2, aggfunc):","  ts_val_l_m = {}","  for ts, val in ts_val_m1.items():","    ts_val_l_m[ts] = [val]","  for ts, val in ts_val_m2.items():","    if ts in ts_val_l_m:","      ts_val_l_m[ts].append(val)","    else:","      ts_val_l_m[ts] = [val]","  ","  return {ts: aggfunc(val_l) for ts, val_l in ts_val_l_m.items() }"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":71,"column":0},"end":{"row":72,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":71,"column":0},"end":{"row":162,"column":0}},"nl":"\n","lines":["def get_stat_perxslice_l(x_l, y_l, slicesize):","  # x_l is sorted","  x_l_ = []","  avg_l, std_l = [], []","  ","  ex = x_l[0] + slicesize","  b, e = 0, 0","  while b < len(x_l):","    while e < len(x_l) and x_l[e] <= ex:","      e += 1","      ","    l = y_l[b:e]","    avg_l.append(np.mean(l) )","    std_l.append(np.std(l) )","    ","    ex += slicesize","    x_l_.append(ex)","    b = e","  return x_l_, avg_l, std_l","","def is_timewindowlen_gt_twl(t_v_m, twl):","  # t_v_m = collections.OrderedDict(sorted(t_v_m.items() ) )","  t_l = [datetime.datetime.fromtimestamp(t) for t, v in t_v_m.items() ]","  if len(t_l) == 0:","    return False","  return max(t_l) - min(t_l) > twl","","def obj_data_m_has_enough(obj_data_m, timewindow_len):","  boolean_l = []","  for obj, data_m in obj_data_m.items():","    # log(INFO, \"obj= {}\".format(obj),","    #           cpu_key_l=[k for k, _ in data_m['cpu'].items() ],","    #           memory_key_l=[k for k, _ in data_m['memory'].items() ] )","    boolean_l.append(","      is_timewindowlen_gt_twl(data_m['cpu']['usage'], timewindow_len) )","    boolean_l.append(","      is_timewindowlen_gt_twl(data_m['memory']['current'], timewindow_len) )","  if not all(boolean_l):","    log(WARNING, \"not enough data is available;\", obj=obj)","    return False","  # if is_nan(data_m['cpu']['requested'] ) or is_nan(data_m['cpu']['limited'] ) or \\","  #   is_nan(data_m['memory']['requested'] ) or is_nan(data_m['memory']['limited'] ):","  #   log(WARNING, \"requested or limited is not available;\", obj=obj)","  #   return False","  # try:","  #   if is_nan(data_m['cpu']['requested'] ) or is_nan(data_m['memory']['requested'] ):","  #     log(WARNING, \"requested is not available;\", obj=obj)","  #     return False","  # except KeyError:","  #   pass","  return True","","def get_sorteddatetime_val_l(m, begin_attimezero=False):","  t_v_m = collections.OrderedDict(sorted(m.items() ) )","  t_l, v_l = [], []","  for t, v in t_v_m.items():","    t_l.append(datetime.datetime.fromtimestamp(int(t) ) )","    v_l.append(v)","  ","  if begin_attimezero:","    min_t = min(t_l)","    t_l = [(t - min_t).total_seconds() for t in t_l]","  return t_l, v_l","","def get_ticks_time_l(stime, etime, stepsize, steplabel):","  time_to_label = lambda t: '{}{}'.format('{0:.1f}'.format((t - stime)/stepsize), steplabel)","  ","  x_l, label_l = [], []","  step = stepsize*5","  ctime = stime","  while ctime <= etime:","    x_l.append(ctime)","    label_l.append(time_to_label(ctime) )","    ctime += step","  x_l.append(etime)","  label_l.append(time_to_label(etime) )","  # log(INFO, \"\", stime=stime, etime=etime, x_l=x_l, label_l=label_l)","  return x_l, label_l","","def get_ticks_resource_l(minsize, maxsize, stepsize, steplabel):","  size_to_label = lambda s: '{0:.2f}'.format(s/stepsize) + steplabel","  ","  x_l, label_l = [], []","  csize = minsize","  while csize <= maxsize:","    x_l.append(csize)","    label_l.append(size_to_label(csize) )","    csize += stepsize","  x_l.append(maxsize)","  label_l.append(size_to_label(maxsize) )","  return x_l, label_l"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":70,"column":0},"end":{"row":71,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":97,"column":0},"end":{"row":105,"column":0}},"nl":"\n","lines":["def deep_max(l):","  l_ = []","  for e in l:","    if isinstance(e, list):","      l_.extend(e)","    else:","      l_.append(e)","  return max(l_)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":97,"column":0},"end":{"row":98,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":100,"column":0},"end":{"row":108,"column":0}},"nl":"\n","lines":["def interpolate(t_l, t_v_m):","  v_l = []","  for t in t_l:","    try:","      v_l.append(t_v_m[t] )","    except KeyError:","      v_l.append(np.nan)","  return pd.Series(v_l, index=t_l).interpolate(method='linear').tolist() # .fillna(0).tolist()"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":100,"column":0},"end":{"row":101,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":28},"end":{"row":0,"column":36}},"text":"requests"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":27},"end":{"row":0,"column":28}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":26},"end":{"row":0,"column":27}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":34},"end":{"row":0,"column":47}},"text":"collections, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":34},"end":{"row":0,"column":44}},"text":"datetime, "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":28},"end":{"row":0,"column":32}},"text":"time"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":27},"end":{"row":0,"column":28}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":26},"end":{"row":0,"column":27}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"nl":"\n","lines":["import pandas as pd"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":8},"end":{"row":3,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":9},"end":{"row":3,"column":10}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":10},"end":{"row":3,"column":11}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":11},"end":{"row":3,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":12},"end":{"row":3,"column":13}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":13},"end":{"row":3,"column":14}},"text":"s"}]}]],"redo":[]},"/log_utils.py":{"scrollTop":304,"scrollLeft":0,"selection":{"start":{"row":29,"column":21},"end":{"row":29,"column":21}},"lastUse":1540665405991,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":3}},"text":"\"\"\""},{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":56,"column":0}},"lines":["A simple, unified logging that can be refactored easily","(I am aware of logging module and I don't find it flexible enough ...)","\"\"\"","import inspect, pprint","","INFO = 0","DEBUG = 1","WARNING = 2","ERROR = 3","","debug_level__string_map = {INFO: \"INFO\", DEBUG: \"DEBUG\", WARNING: \"WARNING\", ERROR: \"ERROR\"}","","# SIM_DEBUG_LEVEL = INFO","SIM_DEBUG_LEVEL = WARNING","# SIM_DEBUG_LEVEL = ERROR","","def slog(dlevel, env, caller, action, affected, **kwargs):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  env= simpy.Environment","  caller= string -- name of the sim component acting","  action= string","  affected= any -- whatever component being acted on/with e.g., packet","  \"\"\"","  if SIM_DEBUG_LEVEL <= dlevel:","    print(\"{} t: {:.2f}] {} {}\\n\\t{}\".format(debug_level__string_map[dlevel], env.now, caller, action, affected) )","    for k, v in kwargs.items():","      print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","DEBUG_LEVEL = INFO","# DEBUG_LEVEL = WARNING","# DEBUG_LEVEL = ERROR","","def log(dlevel, log, **kwargs):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  log= string to be logged","  \"\"\"","  try:","    funcname = inspect.stack()[1][3]","  except IndexError:","    funcname = ''","  ","  if DEBUG_LEVEL <= dlevel:","    print(\"{}] {}:: {}\".format(debug_level__string_map[dlevel], funcname, log) )","    for k, v in kwargs.items():","      print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","def blog(**kwargs):","  for k, v in kwargs.items():","    print(\"  {}: {}\".format(k, pprint.pformat(v) ) )"]}]}]],"redo":[]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":12,"column":2},"end":{"row":12,"column":2}},"lastUse":1540664945134,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":24}},"text":"elif [ $1  = 's' ]; then"},{"action":"insertText","range":{"start":{"row":5,"column":24},"end":{"row":6,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"lines":["# $PY sim.py"]},{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":21}},"text":"$PY sim_wtrace_exp.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":23},"end":{"row":8,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":9,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":11}},"text":"#!/bin/bash"},{"action":"insertText","range":{"start":{"row":9,"column":11},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":10,"column":0},"end":{"row":26,"column":0}},"lines":["echo $1 $2 $3","","PY=python3","","if [ $1 = 'c' ]; then","  $PY cap_finder.py","elif [ $1 = 'p' ]; then","  $PY popularity.py","elif [ $1 = 'e' ]; then","  $PY exp.py","elif [ $1 = 'b' ]; then","  $PY bucket_model.py","elif [ $1 = 'bs' ]; then","  $PY bucket_sim.py","else","  echo \"Arg did not match!\""]},{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":2}},"text":"fi"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":13},"end":{"row":16,"column":14}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":13},"end":{"row":16,"column":14}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":23}},"text":"  $PY sim_wtrace_exp.py"},{"action":"removeText","range":{"start":{"row":6,"column":2},"end":{"row":6,"column":14}},"text":"# $PY sim.py"},{"action":"removeText","range":{"start":{"row":6,"column":2},"end":{"row":7,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":16,"column":2},"end":{"row":16,"column":19}},"text":"$PY popularity.py"},{"action":"insertText","range":{"start":{"row":16,"column":2},"end":{"row":16,"column":14}},"text":"# $PY sim.py"},{"action":"insertText","range":{"start":{"row":16,"column":14},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":17,"column":23}},"text":"  $PY sim_wtrace_exp.py"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":18,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["elif [ $1 = 'e' ]; then","  $PY exp.py","elif [ $1 = 'b' ]; then","  $PY bucket_model.py","elif [ $1 = 'bs' ]; then","  $PY bucket_sim.py"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":["","","","","","elif [ $1  = 's' ]; then","  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}]],"redo":[]},"/srun.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":8,"column":2},"end":{"row":8,"column":2}},"lastUse":1540664854714,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":11}},"text":"#!/bin/bash"},{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":8,"column":0}},"lines":["echo $1 $2 $3","","if [ $1 = 'i' ]; then","  srun --partition=main --nodes=1 --ntasks=1 --cpus-per-task=1 --mem=8000 --time=3:00:00 --export=ALL --pty bash -i","  # srun --partition=main --nodes=1 --gres=gpu:1 --ntasks=1 --cpus-per-task=1 --mem=8000 --time=1:00:00 --export=ALL --pty bash -i","else","  echo \"Argument did not match!\""]},{"action":"insertText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":2}},"text":"fi"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":61},"end":{"row":4,"column":62}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":61},"end":{"row":4,"column":62}},"text":"4"}]}]],"redo":[]}},"window":{"width":1366,"height":688,"top":0,"left":0,"isMaximized":true}}